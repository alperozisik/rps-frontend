!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="./",t(t.s=17)}([function(e,n,t){e.exports=t(19).default},function(e,n,t){"use strict";var r=t(28)();e.exports=function(e){return e!==r&&null!==e}},function(e,n,t){var r={},o=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var n={};return function(e){if("function"==typeof e)return e();if(void 0===n[e]){var t=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}}(),a=null,s=0,l=[],c=t(42);function d(e,n){for(var t=0;t<e.length;t++){var o=e[t],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],n))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(y(o.parts[a],n));r[o.id]={id:o.id,refs:1,parts:s}}}}function u(e,n){for(var t=[],r={},o=0;o<e.length;o++){var i=e[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function p(e,n){var t=i(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),l.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,o)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function h(e){var n=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(n,e.attrs),p(e,n),n}function m(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function y(e,n){var t,r,o,i;if(n.transform&&e.css){if(!(i=n.transform(e.css)))return function(){};e.css=i}if(n.singleton){var l=s++;t=a||(a=h(n)),r=b.bind(null,t,l,!1),o=b.bind(null,t,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(n,e.attrs),p(e,n),n}(n),r=function(e,n,t){var r=t.css,o=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,n),o=function(){f(t),t.href&&URL.revokeObjectURL(t.href)}):(t=h(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){f(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=u(e,n);return d(t,n),function(e){for(var o=[],i=0;i<t.length;i++){var a=t[i];(s=r[a.id]).refs--,o.push(s)}e&&d(u(e,n),n);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var g=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}();function b(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(e,n,t){e.exports=t.p+"53723e2f2edb38dd6d83bcb973f8bf69.png"},function(e,n,t){e.exports=t.p+"9b9a4ec267d4c7fb5d8fed6e77426eea.png"},function(e,n,t){e.exports=t.p+"7a577317e6a947336ec172c040a96705.png"},function(e,n,t){e.exports=t.p+"33badd3a2450cd0b2f466a3c0ad4ad59.png"},function(e,n,t){e.exports=t.p+"5fa79005d735d28099567166a66cf2d5.png"},function(e,n){e.exports='<div id="list" class="page">\n    <div id="gameList">\n        <table class="rwd-table">\n            <thead>\n                <tr>\n                    <th>Owner</th>\n                    <th>Game Type</th>\n                    <th>Players</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td data-th="Movie Title">Star Wars</td>\n                    <td data-th="Genre">Adventure, Sci-fi</td>\n                    <td data-th="Year">1977</td>\n                    <td data-th="Gross">$460,935,665</td>\n                </tr>\n                <tr>\n                    <td data-th="Movie Title">Howard The Duck</td>\n                    <td data-th="Genre">"Comedy"</td>\n                    <td data-th="Year">1986</td>\n                    <td data-th="Gross">$16,295,774</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n'},function(e,n,t){e.exports='<div id="game" class="page">\n    <div id="gamePlayHistory"></div>\n    <hr />\n    <div id="chooseAction">\n        <h2>Select your action</h2>\n        <div>\n            <a id="actionRock" href="#" class="playerActionlink" action="rock">\n                <div class="playerPossibleAction">\n                    <img src="'+t(8)+'" alt="rock" />\n                    <span>Rock</span>\n                </div>\n            </a>\n            <a id="actionPaper" href="#" class="playerActionlink" action="paper">\n                <div class="playerPossibleAction">\n                    <img src="'+t(7)+'" alt="paper" />\n                    <span>Paper</span>\n                </div>\n            </a>\n            <a id="actionScissors" href="#" class="playerActionlink" action="scissors">\n                <div class="playerPossibleAction">\n                    <img src="'+t(6)+'" alt="scissors" />\n                    <span>Scissors</span>\n                </div>\n            </a>\n            <a id="actionLizard" href="#" class="playerActionlink" action="lizard">\n                <div class="playerPossibleAction">\n                    <img src="'+t(5)+'" alt="lizard" />\n                    <span>Lizard</span>\n                </div>\n            </a>\n            <a id="actionSpock" href="#" class="playerActionlink" action="spock">\n                <div class="playerPossibleAction">\n                    <img src="'+t(4)+'" alt="spock" />\n                    <span>Spock</span>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>\n'},function(e,n,t){e.exports='<a href="#" class="backButton"><img alt="back" src="'+t(20)+'"></a>'},function(e,n){e.exports='<div id="newGame" class="page">\n    <div class="dialog" id="newGameDialog">\n        <div>\n            <div>\n                <h2>Setup your game</h2>\n                <span id="playVersus"></span>\n            </div>\n            <div id="gameTypeSelection">\n                <h3>Game Type</h3>\n                <div>\n                    <input type="radio" id="gameType_rps" name="gameType" checked value="RPS" />\n                    <label for="gameType_rps">Rock Paper Scissors</label>\n                </div>\n                <div>\n                    <input type="radio" id="gameType_rpssl" name="gameType" value="RPSSL" />\n                    <label for="gameType_rpssl">Rock Paper Scissors Spock Lizard</label>\n                </div>\n            </div>\n\n            <div>\n                <h3>Number of Players</h3>\n                <div>\n                    <input type="radio" id="player2" name="playerCount" checked value="2" />\n                    <label for="player2">2 Players</label>\n                </div>\n                <div>\n                    <input type="radio" id="player3" name="playerCount" value="3" />\n                    <label for="player3">3 Players</label>\n                </div>\n                <div>\n                    <input type="radio" id="player4" name="playerCount" value="4" />\n                    <label for="player4">4 Players</label>\n                </div>\n                <div>\n                    <input type="radio" id="player5" name="playerCount" value="5" />\n                    <label for="player5">5 Players</label>\n                </div>\n            </div>\n            <button id="btnCreateGame">Create new Game</button>\n        </div>\n    </div>\n\n</div>\n'},function(e,n){e.exports='<div id="main" class="page">\n    <div class="dialog" id="mainMenu">\n        <h2>Choose</h2>\n        <button id="newGame">Host a new Game</button>\n        <button id="joinGame">Join Game</button>\n        <button id="aiGame">Play vs Computer</button>\n    </div>\n</div>'},function(e,n){e.exports='<div id="register" class="page">\n    <div class="dialog" id="registerForm">\n        <h2>Register</h2>\n        <label for="tbRegister">Please enter your name to continue</label>\n        <input type="text" id="tbRegister" name="tbRegister"/>\n        <button id="btnRegister">Register</button>\n    </div>\n</div>'},function(e,n,t){"use strict";var r,o,i,a,s,l,c,d=t(35),u=t(21),p=Function.prototype.apply,f=Function.prototype.call,h=Object.create,m=Object.defineProperty,y=Object.defineProperties,g=Object.prototype.hasOwnProperty,b={configurable:!0,enumerable:!1,writable:!0};s={on:r=function(e,n){var t;return u(n),g.call(this,"__ee__")?t=this.__ee__:(t=b.value=h(null),m(this,"__ee__",b),b.value=null),t[e]?"object"==typeof t[e]?t[e].push(n):t[e]=[t[e],n]:t[e]=n,this},once:o=function(e,n){var t,o;return u(n),o=this,r.call(this,e,t=function(){i.call(o,e,t),p.call(n,this,arguments)}),t.__eeOnceListener__=n,this},off:i=function(e,n){var t,r,o,i;if(u(n),!g.call(this,"__ee__"))return this;if(!(t=this.__ee__)[e])return this;if("object"==typeof(r=t[e]))for(i=0;o=r[i];++i)o!==n&&o.__eeOnceListener__!==n||(2===r.length?t[e]=r[i?0:1]:r.splice(i,1));else r!==n&&r.__eeOnceListener__!==n||delete t[e];return this},emit:a=function(e){var n,t,r,o,i;if(g.call(this,"__ee__")&&(o=this.__ee__[e]))if("object"==typeof o){for(t=arguments.length,i=new Array(t-1),n=1;n<t;++n)i[n-1]=arguments[n];for(o=o.slice(),n=0;r=o[n];++n)p.call(r,this,i)}else switch(arguments.length){case 1:f.call(o,this);break;case 2:f.call(o,this,arguments[1]);break;case 3:f.call(o,this,arguments[1],arguments[2]);break;default:for(t=arguments.length,i=new Array(t-1),n=1;n<t;++n)i[n-1]=arguments[n];p.call(o,this,i)}}},l={on:d(r),once:d(o),off:d(i),emit:d(a)},c=y({},l),e.exports=n=function(e){return null==e?h(c):y(Object(e),l)},n.methods=s},function(e,n,t){e.exports='<div class="header">\n    <img alt="rock paper scissors spock lizzard logo" src="'+t(36)+'" />\n</div>\n'},function(e,n,t){"use strict";t.r(n);t(44),t(41),t(38);var r=t(16),o=t.n(r);const i=new Map;var a;var s={add:(e,n)=>{let t=n;t.component.style.display="none",i.set(e,t),document.body.appendChild(t.component),t.emit("init")},go:(e,n={})=>{if(e===a)return;let t=i.get(e),r=i.get(a);r&&(r.component.style.display="none",r.emit("hide")),a=e,t.component.style.display="",t.emit("show",n)}},l=t(15),c=t.n(l);function d(e){const n=p(e),t=document.createElement(n?"table":"div");return t.innerHTML=e,n&&"TBODY"===t.firstChild.tagName?t.firstChild.firstChild:t.firstChild}const u=["tr"],p=e=>{let n=e.trim().substr(1).toLowerCase();for(let e of u)if(n.startsWith(e))return!0;return!1},f=Symbol("html"),h=Symbol("component");class m extends c.a{constructor(e){super(),this[f]=e,this[h]=d(e),Object.defineProperties(this,{html:{enumerable:!0,configurable:!1,get:()=>this[f]},component:{enumerable:!0,configurable:!1,get:()=>this[h]}})}}var y=t(14);const g="rps-alperozisik.c9users.io",b="https://"+g,v="alper",w="rps",x=/^\w+:\/\/\w+/;function k(e){return new Promise((n,t)=>{var r=e.url,o=e.q,i=e.method||"GET",a=e.body||{};if(x.test(r)||(r.startsWith("/")||(r="/"+r),r=b+r),"object"==typeof o){let e=[];for(let n in o)e.push(`${encodeURIComponent(n)}=${encodeURIComponent(o[n])}`);e.length>0&&(r.indexOf("?")>-1?r+="&":r+="?"),r+=e.join("&")}var s=new XMLHttpRequest;s.onreadystatechange=(()=>{if(s.readyState==s.HEADERS_RECEIVED){if(!s.getResponseHeader("Content-Type").startsWith("application/json"))return s.abort(),t({message:"Invalid Content Type"})}else if(4==s.readyState&&s.status>0){let e=JSON.parse(s.responseText);s.status>=200&&s.status<300?n(e):t(e)}}),s.open(i,r,!0),s.setRequestHeader("Authorization","Basic "+window.btoa(`${v}:${w}`)),s.setRequestHeader("Content-Type","application/json"),"GET"===i||"OPTIONS"===i?a=void 0:"object"==typeof a&&(a=JSON.stringify(a)),s.send(a)})}var S=null;const j=()=>S,P=new m(t.n(y).a);var A=P;P.on("init",()=>{let e=document.getElementById("tbRegister"),n=document.getElementById("btnRegister");e.addEventListener("keyup",function(e){e.preventDefault(),13===e.keyCode&&n.click()}),n.addEventListener("click",function(n){var t=e.value;t&&(e=>new Promise((n,t)=>{k({method:"POST",url:"/player",body:{name:e}}).then(e=>{n(S=e)},e=>{t(e)})}))(t).then(()=>{s.go("main")}).catch(e=>{console.error(e),alert("There has been an error while registering player. Pleace check console")})})}),P.on("show",e=>{document.getElementById("tbRegister").value=""});var O=t(13);const T=new m(t.n(O).a);var E=T;T.on("init",()=>{let e=document.querySelector("#newGame"),n=document.querySelector("#joinGame"),t=document.querySelector("#aiGame");e.addEventListener("click",e=>{s.go("newGame",{opponents:"human"})}),t.addEventListener("click",e=>{s.go("newGame",{opponents:"ai"})}),n.addEventListener("click",e=>{s.go("list")})});var L=t(12),R=t.n(L),C=t(11),_=t.n(C);function G(e,n){const t=d(_.a);return t.addEventListener("click",r=>{"string"==typeof e?s.go(e,n):e.call(t,n)}),t}var I=t(0);const N=new m(R.a);var z=N;N.on("init",()=>{let e=G("main"),n=document.querySelector("#newGameDialog");n.insertBefore(e,n.firstChild),document.querySelector("#btnCreateGame").addEventListener("click",function(e){let n={gameType:I.GameType[document.querySelector('input[name="gameType"]:checked').value],playerCount:Number(document.querySelector('input[name="playerCount"]:checked').value),opponents:N.data.opponents,joinType:"owner"};s.go("game",n)})}),N.on("show",e=>{N.data=e,document.querySelector("#playVersus").innerHTML=`Play vs ${e.opponents}`,document.querySelector("#gameType_rps").checked=!0,document.querySelector("#player2").checked=!0});var M=t(10);const q=(e,n,t)=>k({method:"POST",url:"/game",body:{owner:e.id||e,gameType:n,maximumNumberOfPlayers:t}}),$=e=>new Promise((n,t)=>{let r=new WebSocket("wss://rps-alperozisik.c9users.io");r.addEventListener("open",function(){r.readyState===WebSocket.OPEN&&r.send(JSON.stringify({type:"joinGame",player:j().id,game:e.id||e})),n(r)})}),U=new m(t.n(M).a),B="Are you sure to end the game? Closing or returning will cause to end for all players",H="One of other players have ended the game or connection to the server is lost. Press OK to return home";var D=!1,J=null,F=U;function W(){document.querySelectorAll("#chooseAction a").forEach(e=>e.classList.add("disabled"))}function Y(){document.querySelectorAll("#chooseAction a").forEach(e=>e.classList.remove("disabled"))}function V(e){const n=document.querySelector("#gamePlayHistory"),t=function(){const e=document.createElement("div");return e.classList.add("gameRow"),e}();return"string"==typeof e&&(e=d(e)),t.appendChild(e),n.appendChild(t),n.scrollTop=n.scrollHeight,t}function K(e){return V(`<span class="gameLog">${e}</span>`)}function X(e,n,t){var r="";for(let e of n)r+=`<div class="playerAction">\n                <span class="playerActionPlayerName">${e[0].name}</span>\n                <div class="playerActionIcon playerActionIcon-${e[1].name}"></div>\n                <span class="playerActionWinner" style="display:${e[0]===t?"inherit":"none"};">Winner</span>\n            </div>`;return V(`<div class="roundLog"><span>${e.round}</span>\n        <div class="playerActionsRow">\n            ${r}\n        </div>\n    </div>`)}function Q(e,n,t,r,o){t?q(j(),n.name,e).then(e=>{const t=new I.Player(j().name);$(e).then(function(r){r.addEventListener("message",function(o){console.log("Message from server ",o.data);var i=JSON.parse(o.data);re[i.type]&&re[i.type](i,{ownerPlayer:t,gameId:e.id,gameType:n},r)}),ne(r),te(r)},e=>{console.error(e),alert("There has been an error while joining the game. Please check browser developer console or go back")})}):(r.addEventListener("message",function(e){console.log("Message from server ",e.data);var t=JSON.parse(e.data);re[t.type]&&re[t.type](t,{gameId:o,gameType:n},r)}),r.readyState===WebSocket.OPEN&&r.send(JSON.stringify({type:"getPlayerList"})),r.readyState===WebSocket.OPEN&&r.send(JSON.stringify({type:"playerReady"})),ne(r),te(r))}function Z(e){var n=Object.keys(e.possibleActions);return n[function(e){return Math.floor(Math.random()*Math.floor(e))}(n.length)]}function ee(e,n){var t=[];e.forEach(e=>{let n=new I.Player(e.name);n.id=e.id,t.push(n)});var r=new I.Game(n,...t);re.recieveRound=((e,n,o)=>{let i=e.round.slice(0);i.forEach(e=>{e[0]=function(e){for(let n of t)if(e.id===n.id)return n;return null}(e[0]),e[1]=r.possibleActions[e[1]]});let a=new I.Round(i);var s=r.playRound(a);X(r,a,s),Y()})}function ne(e){U.actionHandler=function(n){e.readyState===WebSocket.OPEN&&e.send(JSON.stringify({type:"userPlays",userPlays:n})),W(),K(`You have played ${n}`)}}function te(e){J=function(n){D=!1,e.close(),n&&(alert(H),s.go("main"))},e.onclose=(()=>{D&&(alert(H),s.go("main"))})}U.on("init",()=>{let e=G(()=>{D?confirm(B)&&(J&&J(!1),s.go("main")):s.go("main")}),n=document.querySelector("#game");n.insertBefore(e,n.firstChild),document.querySelectorAll("#chooseAction a").forEach(e=>{e.addEventListener("click",function(e){(function(){if(this.classList.contains("disabled"))return;var e=this.attributes.action.value;console.log("user selected "+e),U.actionHandler&&U.actionHandler(e)}).call(this)})})}),U.on("show",e=>{J=null,D=!1;let n=document.querySelector("#actionSpock"),t=document.querySelector("#actionLizard"),r=e.gameType;"string"==typeof r&&(r=I.GameType[r]),n.style.display=t.style.display=r===I.GameType.RPS?"none":"";const o=document.querySelector("#gamePlayHistory");for(;o.firstChild;)o.removeChild(o.firstChild);U.actionHandler=null,"owner"===e.joinType?"ai"===e.opponents?(Y(),function(e,n){const t=new I.Player(j().name);K(j().name+" joined");const r=[];for(let n=1;n<e;n++){let e="AI Player "+n;K(e+" joined");let t=new I.Player(e);r.push(t)}var o=new I.Game(n,t,...r);U.actionHandler=function(e){var n=new I.Round;n.set(t,o.possibleActions[e]);for(let e of r)n.set(e,o.possibleActions[Z(o)]);var i=o.playRound(n);X(o,n,i)}}(e.playerCount,r)):(W(),Q(e.playerCount,r,!0)):(W(),Q(e.playerCount,r,!1,e.ws,e.gameId))});const re={joinGameResponse:(e,n,t)=>{e.success?(K(j().name+" joined"),t.readyState===WebSocket.OPEN&&t.send(JSON.stringify({type:"playerReady"})),D=!0):(console.error(e),alert("There has been an error while joining the game. Please check browser developer console or go back"))},playerJoined:(e,n,t)=>{K(`New player joined the game: ${e.newPlayerName}. Players: ${e.playerCount}/${e.maximumNumberOfPlayers}`)},getPlayerListResponse:(e,n,t)=>{D=!0,e.players.forEach(e=>{K(`${e.name} has joined the game`)})},gameReady:(e,n,t)=>{K("Game is ready, enjoy!"),Y(),ee(e.players,n.gameType)},endGame:(e,n,t)=>{J&&J(!0)}};window.addEventListener("beforeunload",function(e){if(D)return(e||window.event).returnValue=B,B});var oe=t(9);const ie=new m(t.n(oe).a);var ae=ie;ie.on("init",()=>{let e=G("main"),n=document.querySelector("#list");n.insertBefore(e,n.firstChild)}),ie.on("show",e=>{const n=document.querySelector("#gameList tbody");for(;n.firstChild;)n.removeChild(n.firstChild);k({method:"GET",url:"/game",q:{gameState:"waiting"}}).then(e=>{e.forEach(e=>{let t=d(`<tr>\n                    <td data-th="Owner">${e.owner.name}</td>\n                    <td data-th="Game Type">${e.gameType}</td>\n                    <td data-th="Players">${e.joinedPlayers}/${e.maximumNumberOfPlayers}</td>\n                    <td data-th="Action"><button gameid="${e.id}" gametype="${e.gameType}">Join</button></td>\n                </tr>`),r=t.querySelector("button");r.addEventListener("click",function(){var e=this.attributes.gameid.value,n=this.attributes.gametype.value;console.log("user selected to join game: "+e),$(e).then(function(t){t.addEventListener("message",function r(o){console.log("Message from server ",o.data);var i=JSON.parse(o.data);se[i.type]&&se[i.type](i,{eventFn:r,gameId:e,gameType:n},t)})},e=>{console.error(e),alert("There has been an error while joining the game. Please check browser developer console or go back")})}.bind(r)),n.appendChild(t)})},e=>{console.error(e),alert("There has been an error while listing the games. Please check browser developer console for more information")})});const se={joinGameResponse:(e,n,t)=>{e.success?(t.removeEventListener("message",n.eventFn),s.go("game",{gameId:n.gameId,gameType:n.gameType,ws:t,joinType:"join"})):(console.error(e),alert("There has been an error while joining the game. Please check browser developer console or go back"))}};if(!window.notSupported){let e=d(o.a);document.body.appendChild(e),s.add("register",A),s.add("main",E),s.add("newGame",z),s.add("game",F),s.add("list",ae),s.go("register")}},function(e,n){var t;t=function(){return this}();try{t=t||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(e,n,t){(function(n){e.exports=function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r=class{constructor(e,n){this.name=e,this.defeatList=[].concat(n)}defeats(e){return this.defeatList.includes(e.name)}defeatsAll(e){return(e=[].concat(e)).filter(e=>this.defeats(e)).length===e.length}isDefeatedBy(e){return e.defeats(this)}toString(){return this.name}};const o={possibleActions:[new r("rock","scissors"),new r("paper","rock"),new r("scissors","paper")],fullName:"Rock Paper Scissors",name:"RPS"},i={possibleActions:[new r("rock",["scissors","lizard"]),new r("paper",["rock","spock"]),new r("scissors",["paper","lizard"]),new r("spock",["scissors","rock"]),new r("lizard",["spock","paper"])],fullName:"Rock Paper Scissors Spock Lizard",name:"RPSSL"};var a={RPS:o,RPSSL:i};Object.freeze(o),Object.freeze(i),n.default={Game:class{constructor(e,...n){if(this.gameType=e,n.length<2)throw Error("Number of players must be 2 or more");this.players=[].concat(n),this.round=0,this.possibleActions={},e.possibleActions.forEach(e=>{this.possibleActions[e.name]=e})}playRound(e){this.round++;let n=null;for(let t of this.players){let{playerAction:r,othersActions:o}=e.getActions(t);if(r.defeatsAll(o)){n=t;break}}return n}},Round:class extends Map{getActions(e){let n,t=[];for(let[r,o]of this)r===e?n=o:t.push(o);return{playerAction:n,othersActions:t}}},GameType:a,Action:r,Player:class{constructor(e){this.name=e}toString(){return this.name}}}}])}).call(this,t(18))},function(e,n,t){e.exports=t.p+"ba8d9ab669f98b2a9f40e3b3062e456a.png"},function(e,n,t){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},function(e,n,t){"use strict";var r=String.prototype.indexOf;e.exports=function(e){return r.call(this,e,arguments[1])>-1}},function(e,n,t){"use strict";var r="razdwatrzy";e.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},function(e,n,t){"use strict";e.exports=t(23)()?String.prototype.contains:t(22)},function(e,n,t){"use strict";e.exports=function(e){return"function"==typeof e}},function(e,n,t){"use strict";var r=t(1),o=Array.prototype.forEach,i=Object.create;e.exports=function(e){var n=i(null);return o.call(arguments,function(e){r(e)&&function(e,n){var t;for(t in e)n[t]=e[t]}(Object(e),n)}),n}},function(e,n,t){"use strict";var r=t(1);e.exports=function(e){if(!r(e))throw new TypeError("Cannot use null or undefined");return e}},function(e,n,t){"use strict";e.exports=function(){}},function(e,n,t){"use strict";var r=t(1),o=Object.keys;e.exports=function(e){return o(r(e)?Object(e):e)}},function(e,n,t){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},function(e,n,t){"use strict";e.exports=t(30)()?Object.keys:t(29)},function(e,n,t){"use strict";var r=t(31),o=t(27),i=Math.max;e.exports=function(e,n){var t,a,s,l=i(arguments.length,2);for(e=Object(o(e)),s=function(r){try{e[r]=n[r]}catch(e){t||(t=e)}},a=1;a<l;++a)n=arguments[a],r(n).forEach(s);if(void 0!==t)throw t;return e}},function(e,n,t){"use strict";e.exports=function(){var e,n=Object.assign;return"function"==typeof n&&(n(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},function(e,n,t){"use strict";e.exports=t(33)()?Object.assign:t(32)},function(e,n,t){"use strict";var r=t(34),o=t(26),i=t(25),a=t(24);(e.exports=function(e,n){var t,i,s,l,c;return arguments.length<2||"string"!=typeof e?(l=n,n=e,e=null):l=arguments[2],null==e?(t=s=!0,i=!1):(t=a.call(e,"c"),i=a.call(e,"e"),s=a.call(e,"w")),c={value:n,configurable:t,enumerable:i,writable:s},l?r(o(l),c):c}).gs=function(e,n,t){var s,l,c,d;return"string"!=typeof e?(c=t,t=n,n=e,e=null):c=arguments[3],null==n?n=void 0:i(n)?null==t?t=void 0:i(t)||(c=t,t=void 0):(c=n,n=t=void 0),null==e?(s=!0,l=!1):(s=a.call(e,"c"),l=a.call(e,"e")),d={get:n,set:t,configurable:s,enumerable:l},c?r(o(c),d):d}},function(e,n,t){e.exports=t.p+"fd820e979943c3c6f88b2448ee7c4f13.png"},function(e,n,t){(n=e.exports=t(3)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Montserrat:300,400,700);",""]),n.push([e.i,'.rwd-table {\n  margin: 1em 0;\n  min-width: 300px;\n}\n.rwd-table tr {\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ddd;\n}\n.rwd-table th {\n  display: none;\n}\n.rwd-table td {\n  display: block;\n}\n.rwd-table td:first-child {\n  padding-top: 0.5em;\n}\n.rwd-table td:last-child {\n  padding-bottom: 0.5em;\n}\n.rwd-table td:before {\n  content: attr(data-th) ": ";\n  font-weight: bold;\n  width: 6.5em;\n  display: inline-block;\n}\n@media (min-width: 480px) {\n  .rwd-table td:before {\n    display: none;\n  }\n}\n.rwd-table th, .rwd-table td {\n  text-align: left;\n}\n@media (min-width: 480px) {\n  .rwd-table th, .rwd-table td {\n    display: table-cell;\n    padding: 0.25em 0.5em;\n  }\n  .rwd-table th:first-child, .rwd-table td:first-child {\n    padding-left: 0;\n  }\n  .rwd-table th:last-child, .rwd-table td:last-child {\n    padding-right: 0;\n  }\n}\n\nbody table {\n  font-family: Montserrat, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  color: #444;\n  background: #eee;\n}\n\nh1 {\n  font-weight: normal;\n  letter-spacing: -1px;\n  color: #34495E;\n}\n\n.rwd-table {\n  background: #34495E;\n  color: #fff;\n  border-radius: 0.4em;\n  overflow: hidden;\n  width: 100%;\n}\n.rwd-table tr {\n  border-color: #46637f;\n}\n.rwd-table th, .rwd-table td {\n  margin: 0.5em 1em;\n}\n@media (min-width: 480px) {\n  .rwd-table th, .rwd-table td {\n    padding: 1em !important;\n  }\n}\n.rwd-table th, .rwd-table td:before {\n  color: #dd5;\n}\n',""])},function(e,n,t){var r=t(37);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,n){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,n,t){var r=t(39);(e.exports=t(3)(!1)).push([e.i,"html {\n  overflow: hidden;\n}\n\nbody {\n  overflow: hidden;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  /*centers items on the line (the x-axis by default)*/\n  align-items: center;\n  /*centers items on the cross-axis (y by default)*/\n  background-color: #EEEEEE;\n  flex-direction: column;\n}\n\nbody *:not(script):not(style):not(meta):not(table):not(tr):not(td):not(th):not(tbody):not(thead) {\n  display: flex;\n}\n\nbutton {\n  background-color: #00A1F1;\n  text-align: center;\n  color: white;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n  border: none;\n\n}\n\ninput[type=text],\nbutton {\n  height: 20pt;\n  align-self: stretch;\n}\n\ninput[type=radio] {\n  margin-right: 3pt;\n}\n\na:link {\n  color: black;\n  background-color: transparent;\n  text-decoration: none;\n}\n\na:visited {\n  color: black;\n  background-color: transparent;\n  text-decoration: none;\n}\n\na:hover {\n  color: black;\n  background-color: transparent;\n  text-decoration: none;\n}\n\na:active {\n  color: black;\n  background-color: transparent;\n  text-decoration: none;\n}\n\nh1 {\n  font-size: 22pt;\n  font-weight: bold;\n}\n\nh2 {\n  font-size: 18pt;\n  font-weight: bold;\n}\n\nh3 {\n  font-size: 15pt;\n  font-weight: 400;\n}\n\nhr {\n  width: 100%;\n}\n\n.header {\n  background-color: white;\n  box-shadow: 0px 3px #888888;\n  align-self: stretch;\n  /*position: absolute;\n  display: block;\n  left: 0;\n  top: 0;\n  width: 100vw;*/\n}\n\n.header>img {\n  max-height: 80pt;\n  max-width: 100vw;\n  object-fit: contain;\n}\n\n.page {\n  flex: 1 1 0;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  flex-direction: column;\n  overflow-y: auto;\n  padding: 3pt;\n}\n\n.dialog {\n  min-height: 60pt;\n  min-width: 200pt;\n  background-color: white;\n  border: 3px solid black;\n  flex-direction: column;\n  padding: 10pt;\n  align-items: center;\n}\n\n#registerForm {\n  height: 160pt;\n  justify-content: space-between;\n}\n\n#mainMenu {\n  height: 130pt;\n  justify-content: space-between;\n}\n\n#newGameDialog {\n  padding: 3pt 0pt 0pt 3pt;\n}\n\n#newGameDialog>div>div {\n  justify-content: space-between;\n  align-items: flex-start;\n  flex-direction: column;\n}\n\n#newGameDialog>div {\n  height: 240pt;\n  justify-content: space-around;\n  align-items: flex-start;\n  flex-direction: column;\n  padding: 7pt 10pt 10pt 7pt;\n  align-items: flex-start;\n}\n\n#newGameDialog h3 {\n  margin-bottom: 3pt;\n}\n\n.backButton {\n  align-self: flex-start;\n  min-height: 15pt;\n}\n\n.backButton>img {\n  height: 15pt;\n}\n\n#game {\n  overflow-y: hidden;\n}\n\n#gamePlayHistory,\n#gameList {\n  overflow-y: scroll;\n  flex-grow: 1;\n  align-self: stretch;\n  background-color: white;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: flex-start;\n  padding: 5pt;\n}\n\n\n#chooseAction {\n  flex-direction: column;\n  padding-bottom: 7pt;\n  min-height: 153px;\n  overflow-y: auto;\n}\n\n#chooseAction>div {\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.playerPossibleAction img {\n  height: 60pt;\n}\n\n\n.playerPossibleAction {\n  height: 83pt;\n  width: 65pt;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: white;\n  border: 1px solid #333333;\n  box-shadow: 2px 2px #888888;\n}\n\n.playerActionlink {\n  margin: 5pt;\n}\n\n\n.gameRow {\n  min-height: max-content;\n}\n\n#chooseAction>h2 {\n  margin-bottom: 5pt;\n}\n\n.roundLog {\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 2pt;\n  margin-bottom: 12pt;\n  min-height: 70pt;\n}\n\n.playerActionsRow {\n  margin-left: 5pt;\n\n}\n\n.playerAction {\n  flex-direction: column;\n  align-items: center;\n  width: 32pt;\n  margin-left: 3pt;\n  margin-right: 3pt;\n}\n\n.playerActionIcon {\n  width: 24pt;\n  height: 24pt;\n  background-size: 24pt 24pt;\n  background-repeat: no-repeat;\n}\n\n.playerActionIcon-rock {\n  background-image: url("+r(t(8))+");\n}\n\n.playerActionIcon-paper {\n  background-image: url("+r(t(7))+");\n}\n\n.playerActionIcon-scissors {\n  background-image: url("+r(t(6))+");\n}\n\n.playerActionIcon-lizard {\n  background-image: url("+r(t(5))+");\n}\n\n.playerActionIcon-spock {\n  background-image: url("+r(t(4))+");\n}\n\n.playerActionWinner {\n  color: green;\n  font-weight: bold;\n  font-size: 7pt;\n}\n\n.playerActionPlayerName {\n  font-size: 7pt;\n  white-space: nowrap;\n  overflow-x: hidden;\n}\n\na.disabled {\n  cursor: not-allowed;\n}\n\n.rwd-table button {\n  width: 70pt;\n  display: inline-block;\n}\n",""])},function(e,n,t){var r=t(40);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,i=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,n,t){(e.exports=t(3)(!1)).push([e.i,"/*\nYUI 3.18.1 (build f7e7bcb)\nCopyright 2014 Yahoo! Inc. All rights reserved.\nLicensed under the BSD License.\nhttp://yuilibrary.com/license/\n*/\n\nhtml{color:#000;background:#FFF}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0}table{border-collapse:collapse;border-spacing:0}fieldset,img{border:0}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:normal}ol,ul{list-style:none}caption,th{text-align:left}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal}q:before,q:after{content:''}abbr,acronym{border:0;font-variant:normal}sup{vertical-align:text-top}sub{vertical-align:text-bottom}input,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit;*font-size:100%}legend{color:#000}#yui3-css-stamp.cssreset{display:none}\n",""])},function(e,n,t){var r=t(43);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(2)(r,o);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,